// Code generated by protoc-gen-go-netrpc. DO NOT EDIT.
// source: proto/package.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	stdcontext "context"
	mservice "github.com/o-kit/micro-kit/dist/mservice"
	common "github.com/o-kit/micro-kit/dist/proto/common"
	context "github.com/o-kit/micro-kit/misc/context"
	grpc "google.golang.org/grpc"
	"net/http"
	"sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreatePackageReq struct {
	// 拣货号
	PickingCode string `protobuf:"bytes,4,opt,name=picking_code,json=pickingCode,proto3" json:"picking_code,omitempty"`
	// 仓库编号
	WarehouseId int64 `protobuf:"varint,5,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	// 库区编号
	AreaId int64 `protobuf:"varint,3,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (m *CreatePackageReq) Reset()         { *m = CreatePackageReq{} }
func (m *CreatePackageReq) String() string { return proto.CompactTextString(m) }
func (*CreatePackageReq) ProtoMessage()    {}
func (*CreatePackageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_244104329609cb26, []int{0}
}

func (m *CreatePackageReq) GetPickingCode() string {
	if m != nil {
		return m.PickingCode
	}
	return ""
}

func (m *CreatePackageReq) GetWarehouseId() int64 {
	if m != nil {
		return m.WarehouseId
	}
	return 0
}

func (m *CreatePackageReq) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

type CreatePackageResp struct {
	PackageCode string `protobuf:"bytes,1,opt,name=package_code,json=packageCode,proto3" json:"package_code,omitempty"`
}

func (m *CreatePackageResp) Reset()         { *m = CreatePackageResp{} }
func (m *CreatePackageResp) String() string { return proto.CompactTextString(m) }
func (*CreatePackageResp) ProtoMessage()    {}
func (*CreatePackageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_244104329609cb26, []int{1}
}

func (m *CreatePackageResp) GetPackageCode() string {
	if m != nil {
		return m.PackageCode
	}
	return ""
}

func init() {
	proto.RegisterType((*CreatePackageReq)(nil), "proto.CreatePackageReq")
	proto.RegisterType((*CreatePackageResp)(nil), "proto.CreatePackageResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ stdcontext.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc_ package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

const ServicePackageService = "proto.PackageService"

var ServiceMethodPackageService = []string{
	"CreatePackage",
}

// PackageServiceClient is the client API for PackageService service.
type PackageServiceClient interface {
	CreatePackage(ctx stdcontext.Context, in *CreatePackageReq, opts ...grpc.CallOption) (*CreatePackageResp, error)
}

type packageServiceClient struct {
	cc *grpc.ClientConn
}

// Start 创建client - 集合了balancer 、resolver、grpcClientConn(important) ...
var packageServiceClientOnce sync.Once
var packageServiceClientInstance PackageServiceClient

func GetPackageService() PackageServiceClient {
	packageServiceClientOnce.Do(func() {
		var err error
		packageServiceClientInstance, err = NewPackageService()
		if err != nil {
			panic(err)
		}
	})
	return packageServiceClientInstance
}

func NewPackageService() (PackageServiceClient, error) {
	cfg := mservice.DefaultClientConfig()
	cfg.Desc = OptionPackageService
	cli, err := mservice.NewClientEx(ServicePackageService, cfg)
	if err != nil {
		return nil, err
	}
	return NewPackageServiceClient(cli.GRPC), nil
}

func NewPackageServiceClient(cc *grpc.ClientConn) PackageServiceClient {
	return &packageServiceClient{cc}
}

func (c *packageServiceClient) CreatePackage(ctx stdcontext.Context, in *CreatePackageReq, opts ...grpc.CallOption) (*CreatePackageResp, error) {
	out := new(CreatePackageResp)
	err := c.cc.Invoke(ctx, "/proto.PackageService/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServiceServer is the server API for PackageService service.
type PackageServiceServer interface {
	CreatePackage(stdcontext.Context, *CreatePackageReq) (*CreatePackageResp, error)
}

func RegisterPackageServiceServer(s *grpc.Server, srv PackageServiceServer) {
	s.RegisterService(&_PackageService_serviceDesc, srv)
}

func RegisterPackageServiceGrpc(s PackageServiceGrpcRegister) {
	s.RegisterService(ServicePackageService, ServiceMethodPackageService)
	RegisterPackageServiceServer(s.GetServer(), s)
}

type PackageServiceMService interface {
	RegisterServiceDesc(*common.ServiceOpDesc)
	PackageServiceServer
	mservice.WebApiRegister
	mservice.GrpcRegister
}

type PackageServiceGrpcRegister interface {
	PackageServiceServer
	mservice.GrpcRegister
}

func RegisterPackageService(s PackageServiceMService) {
	s.RegisterServiceDesc(OptionPackageService)
	RegisterPackageServiceGrpc(s)
	RegisterPackageServiceWebApiEx(s)
}

type PackageServiceWebApiRegister interface {
	PackageServiceServer
	mservice.WebApiRegister
}

func RegisterPackageServiceWebApi(s PackageServiceWebApiRegister) {
	RegisterPackageServiceWebApiImpl(s, s)
}

func RegisterPackageServiceWebApiImpl(s mservice.WebApiRegister, impl PackageServiceServer) {
	wrap := &PackageServiceWebApi{server: impl, register: s}
	s.WebApiRegister("/api/proto.PackageService/CreatePackage", wrap.CreatePackage)
}

func RegisterPackageServiceWebApiEx(s PackageServiceWebApiRegister) {
	wrap := &PackageServiceWebApi{server: s, register: s}
	s.WebApiRegister("/api/proto.PackageService/CreatePackage", wrap.CreatePackage)
}

type PackageServiceWebApi struct {
	server   PackageServiceServer
	register mservice.WebApiRegister
}

func (s *PackageServiceWebApi) CreatePackage(ctx *context.T, w http.ResponseWriter, req *http.Request) {
	params := new(CreatePackageReq)
	if err := s.register.WebApiDecode(ctx, req, params); err != nil {
		s.register.WebApiHandleResp(ctx, w, nil, err)
		return
	}
	resp, err := s.server.CreatePackage(*ctx, params)
	s.register.WebApiHandleResp(ctx, w, resp, err)
}

// End 创建client - 集合了balancer 、resolver、grpcClientConn(important) ...

func _PackageService_CreatePackage_Handler(srv interface{}, ctx stdcontext.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PackageService/CreatePackage",
	}
	handler := func(ctx stdcontext.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).CreatePackage(ctx, req.(*CreatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PackageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PackageService",
	HandlerType: (*PackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePackage",
			Handler:    _PackageService_CreatePackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/package.proto",
}

var OptionPackageService = common.GenOption([]byte{
	// 39bytes of Option
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
})

func init() { proto.RegisterFile("proto/package.proto", fileDescriptor_244104329609cb26) }

var fileDescriptor_244104329609cb26 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x48, 0x4c, 0xce, 0x4e, 0x4c, 0x4f, 0xd5, 0x03, 0xf3, 0x84, 0x58, 0xc1, 0x94,
	0x52, 0x21, 0x97, 0x80, 0x73, 0x51, 0x6a, 0x62, 0x49, 0x6a, 0x00, 0x44, 0x36, 0x28, 0xb5, 0x50,
	0x48, 0x91, 0x8b, 0xa7, 0x20, 0x33, 0x39, 0x3b, 0x33, 0x2f, 0x3d, 0x3e, 0x39, 0x3f, 0x25, 0x55,
	0x82, 0x45, 0x81, 0x51, 0x83, 0x33, 0x88, 0x1b, 0x2a, 0xe6, 0x9c, 0x9f, 0x92, 0x0a, 0x52, 0x52,
	0x9e, 0x58, 0x94, 0x9a, 0x91, 0x5f, 0x5a, 0x9c, 0x1a, 0x9f, 0x99, 0x22, 0xc1, 0xaa, 0xc0, 0xa8,
	0xc1, 0x1c, 0xc4, 0x0d, 0x17, 0xf3, 0x4c, 0x11, 0x12, 0xe7, 0x62, 0x4f, 0x2c, 0x4a, 0x4d, 0x04,
	0xc9, 0x32, 0x83, 0x65, 0xd9, 0x40, 0x5c, 0xcf, 0x14, 0x25, 0x33, 0x2e, 0x41, 0x34, 0x2b, 0x8b,
	0x0b, 0xc0, 0x76, 0x42, 0xb8, 0x10, 0x3b, 0x19, 0xa1, 0x76, 0x42, 0xc4, 0x40, 0x76, 0x1a, 0x85,
	0x70, 0xf1, 0x41, 0x75, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x39, 0x71, 0xf1, 0xa2,
	0x98, 0x24, 0x24, 0x0e, 0xf1, 0x9c, 0x1e, 0xba, 0x97, 0xa4, 0x24, 0xb0, 0x4b, 0x14, 0x17, 0x24,
	0xb1, 0x81, 0x25, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92, 0xe8, 0x6b, 0xe1, 0x25, 0x01,
	0x00, 0x00,
}
